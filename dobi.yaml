#
# dobi.yaml - resources for building, testing, and developing dobi
#

meta:
    project: dobi
    default: all

#
# Mounts
#

mount=source:
    bind: .
    path: /go/src/github.com/dnephin/dobi

mount=dist:
    bind: ./dist/bin/
    path: /go/bin/

mount=projectdir:
    bind: .
    path: '{fs.projectdir}'

#
# Images
#

image=builder:
    image: dobi-dev
    context: dockerfiles/
    dockerfile: Dockerfile.build

image=linter:
    image: dobi-linter
    dockerfile: dockerfiles/Dockerfile.lint

image=dist-img:
    image: dnephin/dobi
    tags: ["{env.DOBI_VERSION}"]
    dockerfile: dockerfiles/Dockerfile.dist
    description: "Build the distribution image"

image=releaser:
    image: dobi-release
    context: dockerfiles/
    dockerfile: Dockerfile.release

image=docs-img:
    image: dobi-docs-dev
    context: dockerfiles/
    dockerfile: Dockerfile.docs

image=example-tester:
    image: dobi-test-examples
    dockerfile: Dockerfile.test-examples
    context: dockerfiles/


#
# Jobs
#

job=binary:
    use: builder
    artifact: ./dist/bin/
    mounts: [source, dist]
    command: script/build
    env:
      - "DOBI_BUILD_OS={env.DOBI_BUILD_OS:}"
    description: "Build the static binary"

job=watch:
    use: builder
    mounts: [source]
    command: script/watch
    interactive: true
    depends: [mocks]
    description: "Watch for code changes and run the unit tests"

job=shell:
    use: builder
    mounts: [source, dist]
    interactive: true
    provide-docker: true
    command: bash
    description: "Start an interactive development environment"

job=test-unit:
    use: builder
    mounts: [source]
    command: "bash -c 'go test -v $(glide novendor)'"
    depends: [mocks]

job=lint:
    use: linter
    mounts: [source]
    description: "Run style checks"

job=lint-shell:
    use: linter
    mounts: [source]
    command: bash
    interactive: true

job=github-release:
    use: releaser
    mounts: [dist]
    env:
     - "GITHUB_TOKEN={env.GITHUB_TOKEN}"
     - "DOBI_VERSION={env.CIRCLE_TAG}"

job=release-version:
    use: builder
    mounts: [dist]
    command: "bash -ec \"dobi-linux --version | awk '{print $3}'\""

job=docs-build:
    use: docs-img
    artifact: ./docs/build/html
    mounts: [source]
    command: docs/script/build

job=docs-shell:
    use: docs-img
    mounts: [source]
    interactive: true
    command: bash

job=docs-watch:
    use: docs-img
    mounts: [source]
    interactive: true
    command: docs/script/watch

job=docs:
    use: docs-img
    mounts: [source]
    interactive: true
    ports: ["8080:8080"]
    command: docs/script/serve
    depends: ['docs-build']
    description: "Build docs and start an http server to preview the docs"

job=mocks:
    use: builder
    mounts: [source]
    command: "bash -c 'go generate $(glide nv)'"

job=deps:
    use: builder
    mounts: [source]
    command: "glide install"
    sources: ['glide.yaml', 'glide.lock']
    artifact: vendor/
    description: "Install go dependencies"

job=test-examples:
    use: example-tester
    provide-docker: true
    interactive: true
    mounts: [projectdir, dist]
    entrypoint: script/test-examples
    working-dir: '{fs.projectdir}'
    depends: [binary-linux]
    env:
      - 'APP_VERSION=testing'
      - 'DOCKER_API_VERSION={env.DOCKER_API_VERSION:}'
      - 'COMPOSE_API_VERSION={env.DOCKER_API_VERSION:}'
      - 'DOBI_EXAMPLE={env.DOBI_EXAMPLE:}'

image=refactorer:
    image: dnephin/go-refactor
    tags: [latest]
    pull: 72h

job=refactor-shell:
    use: refactorer
    mounts: [source]
    interactive: true
    working-dir: /go/src/github.com/dnephin/dobi
    env: [GOPATH=/go]
    command: sh
    description: "Start an interactive shell for running go refactor tools"


env=linux-only:
    variables: [DOBI_BUILD_OS=linux]

#
# Aliases
#

alias=test:
    tasks: [test-unit, test-examples]
    description: "Run all tests"

alias=all:
    tasks: [lint, test, docs-build, binary]
    description: "Run all lint and build tasks"

alias=binary-linux:
    tasks: [linux-only, binary]

alias=ci-circle-main:
    tasks: [lint, test-unit, docs-build, binary]

alias=ci-circle-examples:
    tasks: [test-examples]

alias=release:
    tasks:
      - 'deps'
      - 'binary'
      - 'github-release'
      - 'release-version:capture(DOBI_VERSION)'
      - 'dist-img:push'
